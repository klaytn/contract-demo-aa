{
  "language": "Solidity",
  "sources": {
    "contracts/Board.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"./IBoard.sol\";\n\ncontract Board is IBoard {\n    address public owner;\n\n    uint256 public cnt;\n    mapping(uint256 => Article) public article;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function reset() external {\n        require(msg.sender == owner);\n        cnt = 0;\n    }\n\n    function write(string calldata content) external {\n        article[cnt] = Article(msg.sender, content);\n        cnt += 1;\n    }\n\n    function read(uint256 idx) external view returns (Article memory) {\n        return article[idx];\n    }\n\n    function readAll() external view returns (Article[] memory) {\n        Article[] memory ret = new Article[](cnt);\n        for (uint256 i = 0; i < cnt; i++) {\n            ret[i] = article[i];\n        }\n        return ret;\n    }\n}\n"
    },
    "contracts/IBoard.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nstruct Article {\n    address writer;\n    string content;\n}\n\ninterface IBoard {\n    function reset() external;\n\n    function write(string calldata content) external;\n\n    function read(uint256 idx) external view returns (Article memory);\n\n    function readAll() external view returns (Article[] memory);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}